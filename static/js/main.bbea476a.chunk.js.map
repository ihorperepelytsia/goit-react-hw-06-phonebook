{"version":3,"sources":["components/Form/Form.jsx","redux/containers/FormContainer.js","redux/actions/index.js","components/ContactList/ContactList.jsx","redux/containers/ContactListContainer.js","components/ContactFilter/ContactFilter.jsx","redux/containers/FilterContainer.js","components/Alert/Alert.jsx","components/App/App.jsx","redux/containers/getContactsContainer.js","redux/reducers/contacts.js","redux/reducers/contactsFilter.js","redux/reducers/index.js","index.js"],"names":["Form","state","name","number","handleChange","target","value","setState","handleSubmit","e","props","contacts","addContact","updateAlertText","preventDefault","undefined","find","contact","this","onSubmit","type","onChange","Component","connect","dispatch","id","v4","ContactList","deleteContact","filter","TransitionGroup","component","map","toLowerCase","includes","CSSTransition","key","timeout","classNames","unmountOnExit","className","onClick","contactsFilter","ContactFilter","filterContact","in","length","placeholder","propType","PropTypes","string","isRequired","func","Alert","text","App","isLoadingPage","alertText","alertLoading","bool","addContacts","getLocalStorageContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","setTimeout","getContacts","combineReducers","store","createStore","rootReducer","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bbea476a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './form.scss';\r\n\r\nexport default class Form extends Component {\r\n  static propTypes = {\r\n    addContact: PropTypes.func.isRequired,\r\n    updateAlertText: PropTypes.func.isRequired,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n      }).isRequired,\r\n    ).isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    const { name, number } = this.state;\r\n    const { contacts, addContact, updateAlertText } = this.props;\r\n\r\n    e.preventDefault();\r\n\r\n    if (name !== '' && number !== '') {\r\n      if (contacts.find(contact => contact.name === name) === undefined) {\r\n        addContact(name, number);\r\n        this.setState({ name: '', number: '' });\r\n      } else {\r\n        updateAlertText(`${name}  is alredy in contacts`, true);\r\n      }\r\n    } else {\r\n      updateAlertText(`No data entered, try again`, true);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Number\r\n            <input\r\n              type=\"number\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Add Contact</button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport Form from '../../components/Form/Form';\r\nimport { addContact } from '../actions';\r\n\r\nconst mapStateToProps = ({ contacts }) => ({\r\n  contacts: contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: (name, number) => dispatch(addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import { v4 } from 'uuid';\r\n\r\nexport const CONTACT_ADD = 'CONTACT_ADD';\r\nexport const CONTACT_DELETE = 'CONTACT_DELETE';\r\nexport const CONTACT_FILTER = 'CONTACT_FILTER';\r\nexport const GET_CONTACTS = 'GET_CONTACTS';\r\n\r\nexport const addContact = (name, number) => ({\r\n  type: CONTACT_ADD,\r\n  id: v4(),\r\n  name,\r\n  number,\r\n});\r\n\r\nexport const deleteContact = id => ({\r\n  type: CONTACT_DELETE,\r\n  id,\r\n});\r\n\r\nexport const filter = filter => ({\r\n  type: CONTACT_FILTER,\r\n  filter,\r\n});\r\n\r\nexport const getContacts = contacts => ({\r\n  type: GET_CONTACTS,\r\n  contacts,\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport './contactList.scss';\r\n\r\nconst ContactList = ({ contacts, deleteContact, filter }) => (\r\n  <TransitionGroup component=\"ul\">\r\n    {contacts.map(({ id, name, number }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase()) ? (\r\n        <CSSTransition key={id} timeout={250} classNames=\"list\" unmountOnExit>\r\n          <li className=\"user\">\r\n            <p className=\"user-name\">{name}</p>\r\n            <p className=\"user-number\">{number}</p>\r\n            <button name={id} onClick={deleteContact}>\r\n              X\r\n            </button>\r\n          </li>\r\n        </CSSTransition>\r\n      ) : null,\r\n    )}\r\n  </TransitionGroup>\r\n);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport ContactList from '../../components/ContactList/ContactList';\r\nimport { deleteContact } from '../actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: ({ target: { name } }) => dispatch(deleteContact(name)),\r\n});\r\nconst mapStateToProps = ({ contacts, contactsFilter }) => ({\r\n  contacts: contacts,\r\n  filter: contactsFilter,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './filter.scss';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nconst ContactFilter = ({ filterContact, contacts, filter }) => (\r\n  <>\r\n    <CSSTransition\r\n      in={contacts.length >= 2}\r\n      timeout={250}\r\n      classNames=\"filter\"\r\n      unmountOnExit\r\n    >\r\n      <div className=\"contact-filter\">\r\n        <label>\r\n          Find Contacts by Name\r\n          <input\r\n            name=\"filter\"\r\n            type=\"text\"\r\n            value={filter}\r\n            onChange={filterContact}\r\n            placeholder=\"Type to filter contact...\"\r\n          />\r\n        </label>\r\n      </div>\r\n    </CSSTransition>\r\n  </>\r\n);\r\n\r\nContactFilter.propType = {\r\n  filter: PropTypes.string.isRequired,\r\n  filterContact: PropTypes.func.isRequired,\r\n};\r\nexport default ContactFilter;\r\n","import { connect } from 'react-redux';\r\nimport ContactFilter from '../../components/ContactFilter/ContactFilter';\r\nimport { filter } from '../actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterContact: ({ target: { value } }) => dispatch(filter(value)),\r\n});\r\n\r\nconst mapStateToProps = ({ contacts, contactsFilter }) => ({\r\n  contacts: contacts,\r\n  filter: contactsFilter,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactFilter);\r\n","import React from 'react';\r\nimport './alert.scss';\r\n\r\nconst Alert = ({ text }) => (\r\n  <div className=\"alert\">\r\n    <p>{text}</p>\r\n  </div>\r\n);\r\n\r\nexport default Alert;\r\n","import React, { Component } from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './animationTransition.scss';\r\nimport Form from '../../redux/containers/FormContainer';\r\nimport ContactList from '../../redux/containers/ContactListContainer';\r\nimport ContactFilter from '../../redux/containers/FilterContainer';\r\nimport Alert from '../Alert/Alert';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    isLoadingPage: false,\r\n    alertText: '',\r\n    alertLoading: false,\r\n  };\r\n\r\n  updateAlertText = (value, bool) => {\r\n    this.setState({ alertText: value, alertLoading: bool });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      isLoadingPage: true,\r\n    });\r\n    const { addContacts } = this.props;\r\n    const getLocalStorageContacts = localStorage.getItem('Contacts');\r\n    if (getLocalStorageContacts) {\r\n      addContacts(JSON.parse(getLocalStorageContacts));\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { contacts } = this.props;\r\n    if (prevProps.contacts !== contacts) {\r\n      localStorage.setItem('Contacts', JSON.stringify(contacts));\r\n    }\r\n\r\n    if (prevState.alertLoading !== this.state.alertLoading) {\r\n      setTimeout(() => this.setState({ alertLoading: false }), 2500);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isLoadingPage, alertText, alertLoading } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"box\">\r\n          <CSSTransition\r\n            in={isLoadingPage}\r\n            timeout={1250}\r\n            classNames=\"headline\"\r\n            unmountOnExit\r\n          >\r\n            <h1>Phonebook</h1>\r\n          </CSSTransition>\r\n\r\n          <CSSTransition\r\n            in={alertLoading}\r\n            timeout={1250}\r\n            classNames=\"alertAnimation\"\r\n            unmountOnExit\r\n          >\r\n            <Alert text={alertText} />\r\n          </CSSTransition>\r\n        </div>\r\n        <Form updateAlertText={this.updateAlertText} />\r\n        <h2>Contacts</h2>\r\n        <ContactFilter />\r\n        <ContactList />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { connect } from 'react-redux';\r\nimport App from '../../components/App/App';\r\nimport { getContacts } from '../actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContacts: contacts => dispatch(getContacts(contacts)),\r\n});\r\n\r\nconst mapStateToProps = ({contacts}) => ({\r\n  contacts: contacts,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CONTACT_ADD, CONTACT_DELETE, GET_CONTACTS } from '../actions/index';\r\n\r\nconst contacts = (state = [], { type, id, number, name, contacts }) => {\r\n  switch (type) {\r\n    case CONTACT_ADD:\r\n      return [\r\n        ...state,\r\n        {\r\n          id,\r\n          number,\r\n          name,\r\n        },\r\n      ];\r\n\r\n    case CONTACT_DELETE:\r\n      return state.filter(contact => contact.id !== id);\r\n\r\n    case GET_CONTACTS:\r\n      return [...contacts];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default contacts;\r\n","import { CONTACT_FILTER } from '../actions';\r\n\r\nconst contactsFilter = (state = '', { type, filter }) => {\r\n  switch (type) {\r\n    case CONTACT_FILTER:\r\n      return filter;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default contactsFilter;\r\n","import { combineReducers } from 'redux';\r\nimport contacts from './contacts';\r\nimport contactsFilter from './contactsFilter';\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  contactsFilter,\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './redux/containers/getContactsContainer';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport { devToolsEnhancer } from 'redux-devtools-extension';\r\nimport rootReducer from './redux/reducers/index';\r\n\r\nconst store = createStore(rootReducer, devToolsEnhancer());\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}